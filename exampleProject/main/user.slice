[object]
# Basic user information
name: string required min(3) max(50)
email: string required email unique
password: string required min(8) max(100) bcrypt
username: string required unique pattern("^[a-zA-Z0-9_]+$") min(3) max(20)

# Profile data
age: number optional min(13)
address: string optional max(200)
phone: string optional pattern("^\+?[0-9]{10,15}$")
profile_image: file optional max_size(2MB) types("image/jpeg", "image/png")
bio: string optional max(500)

# System fields
role: enum("user", "moderator", "admin") default("user")
status: enum("active", "inactive", "suspended") default("active")
verified: boolean default(false)
created_at: timestamp auto_now
updated_at: timestamp auto_update
last_login: timestamp optional

# Relations
organizations: array<organization> (
    no_duplicates
    max_items(10)
    max_size(1MB)
    discard_strategy(oldest)
)
posts: relation<post> (
    foreign_key("author_id")
    cascade_delete
)
friends: relation<user> (
    many_to_many
    through("friendships")
)

[indexes]
email_idx: { fields: ["email"], type: "btree" }
name_username_idx: { fields: ["name", "username"], type: "hash" }
created_at_idx: { fields: ["created_at"], type: "btree" }

[permissions]
create: ["admin", "api"]
read: ["self", "admin", "moderator"]
update: ["self", "admin"]
delete: ["admin"]

[validations]
# Custom validation rules
rule email_domain_check {
    validate: "email.endsWith('.com') || email.endsWith('.org') || email.endsWith('.edu')"
    message: "Email domain must be .com, .org, or .edu"
}

rule adult_admin {
    condition: "role == 'admin'"
    validate: "age >= 21"
    message: "Admins must be at least 21 years old"
}
